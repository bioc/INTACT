stop("gene_data must be a data frame object.")
}
if (!("gene" %in% colnames(gene_data))){
stop("One of the columns of gene_data must be 'gene'.")
}
if (!("TWAS_z" %in% colnames(gene_data))
& !("TWAS_BFs" %in% colnames(gene_data))){
stop("One column of gene_data must be either 'TWAS_z' or 'TWAS_BFs'
(but both should not exist together in gene_data).")
}
if (!("GLCP" %in% colnames(gene_data))){
stop("One of the columns of gene_data but be 'GLCP'")
}
if (sum(!is.na(as.numeric(gene_data$GLCP))) < length(gene_data$GLCP)){
stop("The GLCP column must be numeric")
}
if (sum(gene_data$GLCP < 0 | gene_data$GLCP > 1) != 0){
stop("The GLCP column must be probabilities between 0 and 1.")
}
if (sum(!is.na(as.numeric(gene_data$TWAS_z))) < length(gene_data$TWAS_z)){
stop("The TWAS_z column must be numeric.")
}
if (sum(!is.na(as.numeric(gene_data$TWAS_BFs))) < length(gene_data$TWAS_BFs)){
stop("The TWAS_BFs column must be numeric.")
}
if (sum(!is.na(as.numeric(gene_data$TWAS_priors))) <
length(gene_data$TWAS_priors)){
stop("The TWAS_priors column must be numeric.")
}
if (length(which(t > 1 | t < 0)) != 0){
stop("t must be a number between 0 and 1.")
}
if (length(t) > 0 & is.numeric(t) == FALSE){
stop("t must be a number between 0 and 1")
}
if (length(D) > 0 & is.numeric(D) == FALSE){
stop("D must be a number.")
}
if (!is.function(prior_fun)){
stop("Prior function must be one of: linear, step, expit, or hybrid.")
}
if (is.numeric(sig_lev) == FALSE | sig_lev > 1 | sig_lev < 0){
stop("sig_level must be a number between 0 and 1.")
}
if (!(SE_type %in% c("profile_likelihood","bootstrap","NDS"))){
stop("Standard error type must be profile_likelihood, bootstrap, or NDS")
}
if (length(boot_rep) > 0 & SE_type != "bootstrap"){
stop("Number of bootstrap samples should only be specified if the SE_type
is specified as bootstrap.")
}
if(length(boot_rep) > 0){
if(boot_rep %% 1 != 0 | boot_rep < 0){
stop("boot_rep must be a positive integer.")
}
}
rst <- data.frame()
for (i in seq(1,length(gene_sets))){
gene_data$d_vec <- 0
gene_data$d_vec[gene_data$gene %in% gene_sets[[i]]] <- 1
if ("TWAS_z" %in% colnames(gene_data) & !("TWAS_priors" %in% colnames(gene_data))){
if (length(t) == 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z)
}
if (length(t) > 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
t = t)
}
if (length(t) == 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
D = D)
}
if (length(t) > 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
t = t,
D = D)
}
}
if ("TWAS_z" %in% colnames(gene_data) & ("TWAS_priors" %in% colnames(gene_data))){
if (length(t) == 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) > 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
t = t,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) == 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
D = D,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) > 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
z_vec = gene_data$TWAS_z,
t = t,
D = D,
twas_priors = gene_data$TWAS_priors)
}
}
if ("TWAS_BFs" %in% colnames(gene_data)){
if (length(t) == 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
twas_BFs = gene_data$TWAS_BFs,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) > 0 & length(D) == 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
twas_BFs = gene_data$TWAS_BFs,
t = t,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) == 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
twas_BFs = gene_data$TWAS_BFs,
D = D,
twas_priors = gene_data$TWAS_priors)
}
if (length(t) > 0 & length(D) > 0){
posterior <- intact(GLCP_vec = gene_data$GLCP,
prior_fun = prior_fun,
twas_BFs = gene_data$TWAS_BFs,
t = t,
D = D,
twas_priors = gene_data$TWAS_priors)
}
}
out <- enrich_res(sig_lev = sig_lev,
pprobs = posterior,
d_vec = gene_data$d_vec,
SE_type = SE_type,
boot_rep = boot_rep)
out$Gene_Set <- names(gene_sets)[i]
out <- out[,c(8,seq(1,7))]
rst <- rbind.data.frame(rst,out)
}
return(rst)
}
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list)
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, t = "a")
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, prior_fun = "a")
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, boot_rep = -1)
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, SE_type = "bootstrap",boot_rep = -1)
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, SE_type = "bootstrap",boot_rep = 1.1)
document()
document()
INTACT::gene_set_list
is.list(INTACT::gene_set_list)
document()
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, sig_lev = "a")
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list, sig_lev = 10)
BiocCheck::BiocCheck()
document()
BiocCheck::BiocCheck()
BiocGenerics:::testPackage("INTACT")
BiocGenerics:::testPackage("INTACT")
library(RUnit)
getwd()
setwd('inst/')
library(RUnit)
library(INTACT)
source('../R/step_prior.R')
source('unitTests/test_Priors.R')
source('unitTests/test_Priors.R')
test_priors()
source('unitTests/test_Priors.R')
test_priors()
setwd('..')
document()
document()
head(INTAC::simdat)
head(INTACT::simdat)
head(simdat)
head(INTACT::simdat)
INTACT
INTACT::gene_set_list
summary(INTACT::gene_set_list)
str(INTACT::gene_set_list)
intactGSE(gene_data = INTACT::simdat,gene_sets = INTACT::gene_set_list)
document()
check()
?checkEquals
document()
check()
BiocCheck::BiocCheck()
document()
BiocCheckGitClone('INTACT')
BiocCheck::BiocCheckGitClone("INTACT")
setwd('..')
BiocCheck::BiocCheckGitClone("INTACT")
document()
library(devtools)
document()
library(roxygen2)
document()
setwd("INTACT/")
document()
setwd('..')
BiocCheck::BiocCheckGitClone("INTACT")
BiocCheck::BiocCheckGitClone("INTACT")
BiocCheck::BiocCheckGitClone("INTACT")
BiocCheck::BiocCheckGitClone("INTACT")
setwd('INTACT/')
document()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
?checkEquals
?.path.package
usethis::use_testthat(3)
use_test("step_prior")
use_test("expit_prior")
use_test("hybrid_prior")
testthat::test_file("tests/testthat/test-linear_prior.R")
testthat::test_file("tests/testthat/test-step_prior.R")
testthat::test_file("tests/testthat/test-expit_prior.R")
testthat::test_file("tests/testthat/test-hybrid_prior.R")
devtools::test()
check()
check()
check()
document()
check()
document()
check()
check()
check()
check()
check()
devtools::test()
intactGSE(gene_data = simdat,gene_sets = gene_set_list)
devtools::test()
devtools::test()
.enrich_bootstrap_se(d_vec = sample(c(0,1),1197,replace=TRUE),pprobs = intact(GLCP_vec=simdat$GLCP,prior_fun=linear, z_vec = simdat$TWAS_z,t = 0.05))
.enrich_bootstrap_se(d_vec = sample(c(0,1),1197,replace=TRUE),pprobs = intact(GLCP_vec=simdat$GLCP,prior_fun=linear, z_vec = simdat$TWAS_z,t = 0.05))
print(.enrich_bootstrap_se(d_vec = sample(c(0,1),1197,replace=TRUE),pprobs = intact(GLCP_vec=simdat$GLCP,prior_fun=linear, z_vec = simdat$TWAS_z,t = 0.05)))
devtools::test()
print(.em_est(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP,
prior_fun=linear, z_vec = simdat$TWAS_z, t = 0.05)))
devtools::test()
print(.enrich_res(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP, prior_fun=linear,
z_vec = simdat$TWAS_z, t = 0.05),
sig_lev = 0.05))
devtools::test()
devtools::test()
devtools::test()
print(.logistic_em(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP, prior_fun=linear,
z_vec = simdat$TWAS_z, t = 0.05),
alpha = c(0,0)))
devtools::test()
is.numeric(.logistic_em(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP, prior_fun=linear,
z_vec = simdat$TWAS_z, t = 0.05),
alpha = c(0,0)))
length(.logistic_em(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP, prior_fun=linear,
z_vec = simdat$TWAS_z, t = 0.05),
alpha = c(0,0)))
devtools::test()
print(pi1_fun(simdat$TWAS_z))
print(.pi1_fun(simdat$TWAS_z))
devtools::test()
print(.logistic_loglik(d_vec = sample(c(0,1),1197,replace=TRUE),
pprobs = intact(GLCP_vec=simdat$GLCP,
prior_fun=linear,
z_vec = simdat$TWAS_z, t = 0.05),
alpha = c(0,0)))
devtools::test()
check()
?sd
check()
check()
check()
expit <- function(GLCP,t=0.05,D = 0.1,u=1,thresholding="hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)) - t)
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
expit(0.5)
expit(0.5,thresholding = 'soft')
expit(1,thresholding = 'soft')
expit(0.05,thresholding = 'soft')
expit <- function(GLCP,t=0.05,D = 0.1,u=1,thresholding="hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
max(1/(1 + exp(-1*(GLCP-0.5)/D)) - t, 0))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
expit(0.05,thresholding = 'soft')
expit(1,thresholding = 'soft')
expit(0.05,thresholding = 'soft')
mesh = seq(0,1,by = 0.001)
mesh
expit_hard = expit(mesh)
expit_soft = expit(mesh,thresholding = 'soft')
plot(mesh,expit_hard)
plot(mesh,expit_soft)
expit <- function(GLCP,t=0.05,D = 0.1,u=1,thresholding="hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
max((1/(1 + exp(-1*(GLCP-0.5)/D)) - t), 0))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
expit_soft = expit(mesh,thresholding = 'soft')
plot(mesh,expit_soft)
expit_soft
expit <- function(GLCP,t=0.05,D = 0.1,u=1,thresholding="hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
ifelse((1/(1 + exp(-1*(GLCP-0.5)/D)) - t) < 0),
0,(1/(1 + exp(-1*(GLCP-0.5)/D)) - t))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
expit_soft = expit(mesh,thresholding = 'soft')
expit <- function(GLCP,t=0.05,D = 0.1,u=1,thresholding="hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
1/(1 + exp(-1*(GLCP-0.5)/D)))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
ifelse((1/(1 + exp(-1*(GLCP-0.5)/D)) - t) < 0,0,
1/(1 + exp(-1*(GLCP-0.5)/D)) - t))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
expit_soft = expit(mesh,thresholding = 'soft')
plot(mesh,expit_soft)
expit_soft
expit_soft = expit(mesh,thresholding = 'sof')
linear <- function(GLCP, t=0.05,u=1,thresholding = "hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP > t, GLCP, 0)
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
ifelse((GLCP - t) < 0, 0,
GLCP - t))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
linear_hard = linear(mesh)
linear_soft = linear(mesh, thresholding = "soft")
plot(mesh,linear_hard)
plot(mesh,linear_soft)
linear_soft
hybrid <- function(GLCP, t=0.05, D = 0.1,u=1,thresholding = "hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
ifelse(GLCP >= t & GLCP < 0.5,  1/(1 + exp(-1*(GLCP-0.5)/D)),
GLCP))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
ifelse(GLCP < 0.5 & (1/(1 + exp(-1*(GLCP-0.5)/D)) - t) < 0,0,
ifelse(GLCP < 0.5 & (1/(1 + exp(-1*(GLCP-0.5)/D)) - t) > 0,1/(1 + exp(-1*(GLCP-0.5)/D)),
ifelse(GLCP >= 0.5 & (GLCP - t) < 0,0,GLCP - t))))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
hybrid_hard = hybrid(mesh)
hybrid_soft = hybrid(mesh,thresholding = 'soft')
plot(mesh,hybrid_hard)
plot(mesh,hybrid_soft)
hybrid <- function(GLCP, t=0.05, D = 0.1,u=1,thresholding = "hard"){
if (thresholding == "hard"){
out <- ifelse(GLCP < t, 0,
ifelse(GLCP >= t & GLCP < 0.5,  1/(1 + exp(-1*(GLCP-0.5)/D)),
GLCP))
}
if (thresholding == "soft"){
out <- ifelse(GLCP < t, 0,
ifelse(GLCP < 0.5 & (1/(1 + exp(-1*(GLCP-0.5)/D)) - t) < 0,0,
ifelse(GLCP < 0.5 & (1/(1 + exp(-1*(GLCP-0.5)/D)) - t) > 0,1/(1 + exp(-1*(GLCP-0.5)/D)) - t,
ifelse(GLCP >= 0.5 & (GLCP - t) < 0,0,GLCP - t))))
}
if (thresholding != "hard" & thresholding != "soft"){
stop("thresholding must be set to 'hard' or 'soft'.")
}
out <- out * u
return(out)
}
hybrid_soft = hybrid(mesh,thresholding = 'soft')
plot(mesh,hybrid_soft)
hybrid_hard = hybrid(mesh,t=0.7)
hybrid_soft = hybrid(mesh,thresholding = 'soft',t=0.7)
plot(mesh,hybrid_hard)
plot(mesh,hybrid_soft)
check()
check()
check()
check()
?linear
pt(q = -1.75,df=24)
2*pnorm(q = -1.11)
2*pnorm(q = -1.12)
2*pnorm(q = -1.68)
2*pnorm(q = -1.12)
library(devtools)
document()
document()
check()
document()
check()
BiocCheck::BiocCheck()
library(testthat)
test()
setwd('..')
install('INTACT/')
setwd("INTACT/")
library(INTACT)
document()
?remove.packages
.rs.restartR()
library(INTACT)
document()
check()
BiocCheck::BiocCheck()
check()
chisq_vec = c(1,3.84,2.86,10)
pchisq(chisq_vec,df=1)
pchisq(chisq_vec,df=1,lower.tail = F)
log10(0)
1/(1 + 10^(-(-Inf)))
pchisq(0.064,df=1,lower.tail = F)
test = rbind(c(17,30),c(283,541))
test
chisq.test(test)
qnorm(0.05)
qnorm(0.05/2,lower.tail = F)
qnorm(0.05/2,lower.tail = T)
pchisq(3.84,df = 1, lower.tail = F)
